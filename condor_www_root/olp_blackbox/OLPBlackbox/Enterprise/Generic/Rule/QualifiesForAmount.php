<?php
/**
 * Class used by enterprise customers for finding what loan amount customers qualify for.
 *
 * @author Dan Ostrowski <dan.ostrowski@sellingsource.com>
 */
class OLPBlackbox_Enterprise_Generic_Rule_QualifiesForAmount extends OLPBlackbox_Rule
{
	/**
	 * Property short
	 *
	 * @var string Property short
	 */
	protected $property_short;
	
	/**
	 * Create rule object, recycling event name from OLPBlackbox_Enterprise_Generic_Rule_QualifiesForAmount
	 *
	 * @return void
	 */
	public function __construct()
	{
		$this->setEventName(OLPBlackbox_Config::EVENT_QUALIFY);
		$this->setStatName(strtolower(OLPBlackbox_Config::EVENT_QUALIFY));
		parent::__construct();
	}
	
	/**
	 * Determines if the rule object can run.
	 *
	 * @param Blackbox_Data $data Informtion about the application we're processing.
	 * @param Blackbox_StateData $state_data Information about the state of the ITarget that is running us.
	 *
	 * @return bool TRUE if the rule can run, FALSE otherwise.
	 */
	protected function canRun(Blackbox_Data $data, Blackbox_IStateData $state_data)
	{
		// loan api cannot work without monthly net income
		return !empty($data->income_monthly_net);
	}
	
	/**
	 * Run the rule object.
	 *
	 * @param Blackbox_Data $data Information about the application we're processing.
	 * @param Blackbox_IStateData $state_data Information about the ITarget running this rule object.
	 *
	 * @return bool TRUE if the rule is valid, FALSE if the rule is not.
	 */
	protected function runRule(Blackbox_Data $data, Blackbox_IStateData $state_data)
	{
		$this->property_short = EnterpriseData::resolveAlias($state_data->campaign_name);
		
		$fund_amount = NULL;
		
		try
		{
			// bread and butter of this rule, get the max amount they can borrow
			// If cfe ran for this target, it's probably in the asynch_object
			// so we'll check there first.
			if (isset($state_data->asynch_object))
			{
				$attr = $state_data->asynch_object->getAttributes();
				if (!empty($attr['fund_qualified']))
				{
					$fund_amount = $attr['fund_qualified'];
				}
			}

			if (is_null($fund_amount))
			{
				$fund_amount = $this->getFundAmount($data, $state_data);
			}
		}
		catch (Exception $e)
		{
			throw new Blackbox_Exception(
				sprintf('unable to get fund amount: %s', $e->getMessage())
			);
		}

		if ($fund_amount > 0)
		{
			$state_data->qualified_loan_amount = $fund_amount;
		}

		return ($fund_amount > 0);
	}
	
	/**
	 * Get the func amount from the Rules
	 *
	 * @param Blackbox_Data $data Blackbox Data
	 * @param Blackbox_IStateData $state_data State Data
	 * @return double
	 */
	protected function getFundAmount(Blackbox_Data $data, Blackbox_IStateData $state_data)
	{
		$loan_type = ($this->getConfig()->title_loan) ? OLPECash_LoanType::TYPE_TITLE : OLPECash_LoanType::TYPE_PAYDAY; 
		$cfe_rules = new OLPECash_CFE_Rules(
			$this->property_short,
			$this->getConfig()->mode,
			$loan_type
		);
		
		$user_rules = $this->getUserRules(array(), $data, $state_data);
		$cfe_rules->setUserRules($user_rules);
		
		$paid_apps = 0;
		$is_react = FALSE;
		if ($this->getConfig()->ecash_react)
		{
			$is_react = TRUE;
		}
		elseif (isset($state_data->customer_history))
		{
			$is_react = $state_data->customer_history->getIsReact($state_data->target_name);
		}
		
		if (isset($state_data->customer_history))
		{
			$paid_apps = $state_data->customer_history->getCountPaid();
		}
		
		$fund_amount = $cfe_rules->getMaxFundAmount(
			$data->income_monthly_net,
			$is_react,
			$paid_apps
		);

		return $fund_amount;
	}

	/**
	 * Get User rules allows for adding of specific rules not generated by ECash
	 * to the rule set.  This functionality was initially added for Agean Title Loans
	 *
	 * @param array $rules An array of rule name value pairs
	 * @param Blackbox_Data $data Blackbox Data
	 * @param Blackbox_IStateData $state_data State Data
	 * @return array
	 */
	protected function getUserRules($rules, Blackbox_Data $data, Blackbox_IStateData $state_data)
	{
		return $rules;
	}
}

?>
