<?php

	// This file has been automatically generated by DataGrabber(tm)
	require_once('mysql.3.php');
	require_once('debug.1.php');
	require_once('error.2.php');
	require_once('csv.1.php');
	require_once('ftp.2.php');
	require_once('hit_stats.1.php');
	require_once('lgen.record.1.php');
	require_once("HTTP/Request.php");// pear
	
	define('MAX_RECORDS', 100);

	define('LICENSE_KEY',  '3301577eb098835e4d771d4cceb6542b');
	//define('STAT_COL', 'h6');	
	
	define('DEBUG',FALSE);
	
	// debug
	//define('URL', 'https://www.lendergateway.com/testpost/paypost.php');
	
	//live
	define('URL', 'http://www.cash2day4u.com/leadpost.php');

	
	
	$SQL=new MySQL_3();
	$cx=$SQL->connect("both","selsds001","sellingsource","%selling\$_db",Debug_1::Trace_Code(__FILE__,__LINE__));
	Error_2::Error_Test($cx,TRUE);
	$total_records=0;
	$total_bad=0;
	$bad_funded=0;
	$bad_unique=0;
	$bad_scrubbed=0;
	
	
	//$yesterday = time();
	
	$start 	= '20050403000000';
	$end 	= '20050403235959';
	
	$SQL->query("lead_generation", "DROP TABLE TmpTable0434");
	$_TmpTable0434 = $SQL->query("lead_generation","
	CREATE TABLE `TmpTable0434` (
	`id` int(10) unsigned NOT NULL AUTO_INCREMENT,
	`modified` timestamp(14) NOT NULL,
	`first_name` varchar(50) NOT NULL DEFAULT '',
	`last_name` varchar(50) NOT NULL DEFAULT '',
	`home_phone` varchar(20) NOT NULL DEFAULT '',
	`work_phone` varchar(20) NOT NULL DEFAULT '',
	`address_1` varchar(120) NOT NULL DEFAULT '',
	`city` varchar(40) NOT NULL DEFAULT '',
	`state` char(2) NOT NULL DEFAULT '',
	`zip` varchar(15) NOT NULL DEFAULT '',
	`email` varchar(100) NOT NULL DEFAULT '',
	`ip_address` varchar(15) NOT NULL DEFAULT '',
	PRIMARY KEY(`id`),
	UNIQUE KEY `email` (`email`)
	) TYPE=MyISAM;
	", Debug_1::Trace_Code(__FILE__,__LINE__));
	
	$map=array(
		"FIRSTNAME" => "first_name",
		"LASTNAME" => "last_name",
		"HOMEAREA" => "HOMEAREA",
		"HOMEEXCH" => "HOMEEXCH",
		"HOMENUMB" => "HOMENUMB",
		"OVER18" => "OVER18",
		"DIRECTDEPOSIT" => "DIRECTDEPOSIT",
		"ADDRESS" => "address_1",
		"CITY" => "city",
		"STATE" => "state",
		"ZIPCODE" => "zip",
		"EMAILADD" => "email",
		"WORKAREA" => "WORKAREA",
		"WORKEXCH" => "WORKEXCH",
		"WORKNUMB" => "WORKNUMB",
		"BESTTIMECONTACT" => "best_call_time",
		"PAYFREQUENCY" => "pay_frequency");
	$pf_map = array(
			"WEEKLY" => "weekly",
			"BI_WEEKLY" => "biweekly",
			"MONTHLY" => "monthly",
			"TWICE_MONTHLY" => "twicemonthly");
	
	//       |
	//       | 
	//     \ | /   --- fucking horrible
	//      \|/
	//  BESTTIMECONTACT Best time to call?     Enum        9AM-12NOON, 12NOON-3PM, 3PM-6PM, 6PM-9PM, AFTER_9PM
	
	
	$bct_map = array(
			"MORNING" => "9AM-12NOON",
			"AFTERNOON" => "12NOON-3PM",
			"EVENING" => "6PM-9PM");
	
	
	
	
	$q = "SELECT
		campaign_info.application_id,
		personal.first_name AS first_name,
		personal.middle_name AS middle_name,
		personal.last_name AS last_name,
		personal.home_phone AS home_phone,
		SUBSTRING(personal.home_phone,1,3) AS HOMEAREA,
		SUBSTRING(personal.home_phone,4,3) AS HOMEEXCH,
		SUBSTRING(personal.home_phone,7,4) AS HOMENUMB,
		employment.work_phone AS work_phone,
		SUBSTRING(employment.work_phone,1,3) AS WORKAREA,
		SUBSTRING(employment.work_phone,4,3) AS WORKEXCH,
		SUBSTRING(employment.work_phone,7,4) AS WORKNUMB,
		bank_info.direct_deposit,
		residence.address_1,
		residence.city,
		residence.state,
		residence.zip,
		personal.email AS email,
		campaign_info.ip_address AS ip_address,
		DATE_FORMAT(campaign_info.modified_date, '%m-%d-%Y %H:%i:%s') as dtime,
		income.pay_frequency,
		personal.best_call_time,
		'1000' AS NETINCOME
		FROM campaign_info
		JOIN personal ON (campaign_info.application_id=personal.application_id)
		JOIN residence USING (application_id)
		JOIN employment ON (employment.application_id = campaign_info.application_id)
		JOIN income ON (income.application_id = campaign_info.application_id)
		JOIN bank_info ON (bank_info.application_id = campaign_info.application_id)	
		WHERE
		campaign_info.modified_date BETWEEN '$start' AND '$end'
		AND personal.first_name!=''
		AND personal.first_name NOT LIKE '%TEST'
		AND personal.first_name NOT LIKE 'TEST%'
		AND personal.first_name NOT LIKE '%SHIT%'
		AND personal.first_name NOT LIKE '%SPAM%'
		AND personal.first_name NOT LIKE '%FUCK%'
		AND personal.first_name NOT LIKE '%BITCH%'
		AND personal.last_name!=''
		AND personal.last_name NOT LIKE '%TEST'
		AND personal.last_name NOT LIKE 'TEST%'
		AND personal.last_name NOT LIKE '%SHIT%'
		AND personal.last_name NOT LIKE '%SPAM%'
		AND personal.last_name NOT LIKE '%FUCK%'
		AND personal.last_name NOT LIKE '%BITCH%'
		AND personal.home_phone!=''
		AND personal.email!=''
		AND personal.email NOT LIKE '%TEST'
		AND personal.email NOT LIKE 'TEST%'
		AND personal.email NOT LIKE '%SHIT%'
		AND personal.email NOT LIKE '%SPAM%'
		AND personal.email NOT LIKE '%FUCK%'
		AND personal.email NOT LIKE '%BITCH%'
		AND personal.email NOT LIKE '%ABUSE'
		AND personal.email NOT LIKE '%INTERNIC%'
		AND personal.email NOT LIKE '%NETWORKSOLUTIONS%'
		AND personal.email NOT LIKE '%TSSMASTERD%'
		AND campaign_info.application_id!=0
		AND LENGTH(residence.zip) = 5
		AND residence.address_1 != ''
		AND bank_info.routing_number != ''
		AND bank_info.account_number != ''			
		AND personal.social_security_number != ''
#AND residence.state NOT IN ('VT','NY','NJ','CT','PA','GA','WV','AR')
		AND bank_info.direct_deposit='TRUE'
		AND income.net_pay >= 1000
		";
	
	


	$Result_olp_bb_partial=$SQL->query("olp_bb_partial",$q,Debug_1::Trace_Code(__FILE__,__LINE__));
	Error_2::Error_Test($Result_olp_bb_partial,TRUE);
	print "\nolp_bb_partial count - ". 
	$SQL->Row_Count($Result_olp_bb_partial);
	$total_records+=$SQL->Row_Count($Result_olp_bb_partial);
	while($object=$SQL->Fetch_Object_Row($Result_olp_bb_partial))
	{
		$object_collection[] = $object;
	}
	foreach($object_collection as $k=>$object_row){
		$ires=$SQL->query("lead_generation","INSERT IGNORE INTO TmpTable0434 
		SET first_name='".mysql_escape_string($object_row->first_name)."',
		last_name='".mysql_escape_string($object_row->last_name)."',
		home_phone='".mysql_escape_string($object_row->home_phone)."',
		work_phone='".mysql_escape_string($object_row->work_phone)."',
		address_1='".mysql_escape_string($object_row->address_1)."',
		city='".mysql_escape_string($object_row->city)."',
		state='".mysql_escape_string($object_row->state)."',
		zip='".mysql_escape_string($object_row->zip)."',
		email='".mysql_escape_string($object_row->email)."',
		ip_address='".mysql_escape_string($object_row->ip_address)."'",Debug_1::Trace_Code(__FILE__,__LINE__));
		if($SQL->Affected_Row_Count($ires)==0)
		{
			unset($object_collection[$k]);
			print "\nRemoved: Not Unique: {$object_row->email}";
			$bad_unique++;
		}
	}
	
				
	$total_bad=$bad_funded+$bad_unique+$bad_scrubbed;
	$results="

Removed (funded): $bad_funded
Removed (scrubbed): $bad_scrubbed
Removed (duplicate): $bad_unique
Total Removed: $total_bad 
Total Records: $total_records good records - $total_bad bad records = ".($total_records-$total_bad)." usable records";print"\n\n";
	print $results;
	print "\n\nFinalizing...";
	
	$usable_count = $total_records-$total_bad;

	print "\n\nHitting stat column... ";
	

	
	print "Done.";
		
		
	$headers = array("FIRST_NAME","LAST_NAME","HOME_PHONE","WORK_PHONE","ADDRESS","CITY","STATE","ZIP","EMAIL","IP_ADDRESS","TIMESTAMP");
	print "\n\nGenerating CSV File '/tmp/leadgen_datagrabber_0434.csv'....";
	

	$fp_csv = fopen("/tmp/leadgen_datagrabber_0434.csv","w");
	$csv = new CSV(
		array(
			"forcequotes" => TRUE,
			"header" => $headers,
			"autoflush" => FALSE,			
			"stream" => $fp_csv,			
		)
	);
	
	$cnt=0;
	$gc_count = 0;
	
	foreach($object_collection as $row)
	{
		if ( $cnt == MAX_RECORDS ) break;
				
		
		// =================================================
		// XFER PROC
		// =================================================
		print "\n\n" . date("H:i:s") . " - START CT SEND ". $row->application_id;
		
			// has BMG or DS received this lead before?
			if ( Leadgen_Record::Check_BMG($SQL,$row->email) )
			{
				print "\nDropping {$row->application_id} : BMG DUPE";
				continue;
			}
			if ( Leadgen_Record::Check_DS($SQL,$row->email) )
			{
				print "\nDropping {$row->application_id} : DS DUPE";
				continue;
			}
			if ( Leadgen_Record::Check_CT($SQL,$row->email) )
			{
				print "\nDropping {$row->application_id} : CT DUPE";
				continue;
			}
			
			$fields = array (
					"Source" => "SellingSourceHalf",
					"FirstName" => $row->first_name,
					"Initial" => $row->middle_name,
					"LastName" => $row->last_name,
					"Email" => $row->email,
					"HomePhone" => $row->HOMEAREA . "-" . $row->HOMEEXCH . "-" . $row->HOMENUMB,
					"WorkPhone" => $row->WORKAREA . "-" . $row->WORKEXCH . "-" . $row->WORKNUMB,
					"DirectDeposit" => ( $row->direct_deposit == "TRUE" ? "Yes" : "No" )
					);
			
			//print_r($fields);
			

			
			$net = new HTTP_Request(URL);
			$net->setMethod(HTTP_REQUEST_METHOD_POST);
			reset($fields);
			while (list($k, $v) = each($fields))
				$net->addPostData($k, $v);
	
			if (!DEBUG)
			{
				$net->sendRequest();
			}
			else
			{
				print_r($fields);
			}
			$resp = $net->getResponseBody();
			
			print "\nRESPONSE: " . $resp;

			if ( trim($resp) == "OK" )
			{
				if ( !DEBUG )
				{
					Leadgen_Record::Record_CT($SQL, $row->application_id, "SellingSourceHalf", $row->first_name, $row->last_name, $row->home_phone, $row->email);
				}
				$cnt++;
			}
			
		print "\n" . date("H:i:s") . " - END CT SEND " . $row->application_id;
		
		// =================================================
		// END
		// =================================================
			
			
		$csv->recordFromArray((array)$row);

	}		
	//Hit::Stats_Promoless(LICENSE_KEY, $SQL, STAT_COL, $cnt);	
	$buf=$csv->_buf;
	
	$csv->flush();
	fclose($fp_csv);
	
	print "\n\nDone. $cnt total records...\n";
						
					
							
			$email_port = 25;
			$email_url = "sellingsource.com";
			$email_s_name = "DataGrubber";
			$email_s_address = "data-grubber-noreply@thesellingsource.com";
			
			// Build Email Header
			$header = new StdClass ();
			$header->smtp_server = $email_smtp_server;
			$header->port = $email_port;
			$header->url = $email_url;
			$header->subject = "Blackbox Page1->Page2 drops - 04-03-2005";
			$header->sender_name = $email_s_name;
			$header->sender_address = $email_s_address;
		
					$message = new StdClass ();
					$message->text = "There are $cnt records attached.  This is an automatic email generated by TSSDataGrubber; do not reply.  If you have any questions, please contact john.hargrove@thesellingsource.com. Thank you.";
					
					
				$attachment_csv = new StdClass ();
				$attachment_csv->name = "page1_drops_04-03-2005.csv";
				$attachment_csv->content = base64_encode($buf);
				$attachment_csv->content_type = "text/x-csv";
				$attachment_csv->content_length = strlen ($buf);
				$attachment_csv->encoded = TRUE;						
					
					
					  
					
		//email delivery
		// Create the Mail Object and Send the Mail	
		include_once("prpc/client.php");
		$mail = new prpc_client("prpc://smtp.2.soapdataserver.com/smtp.1.php");
			
		// Key Line - Create the mailing (Name of mailing, headers, scheduled date, scheduled time) DO NOT USE SCHEDULING!!!
		$mailing_id = $mail->CreateMailing ("datagrubber_run", $header, NULL, NULL);
	
		
		$recipients = array();
		
		$rec = new StdClass();
		$rec->type="To";
		$rec->address="myya.perez@thesellingsource.com";
		$rec->name="myya perez";
		$recipients[] = $rec;

		// Key Line - Add the package to the mailing (mailing_id, array of recipients, message, array of attachments)
		$package_id = $mail->AddPackage ($mailing_id, $recipients, $message, array($attachment_csv));

		// Key Line - Tell the server to process the mailing (send all emails)
		$result = $mail->SendMail ($mailing_id);
	
		// Debug Code - Use if you want to see the soap stuff
		// print_r ($mail->__get_wire ());
		echo " ... Mailing Id: ".$mailing_id."
";
		echo " ... Result: ".$result."\n";
		echo " ... Recipients: 
";	

		exit;
					$message = new StdClass ();
					$message->text = "
					
					DataGrubber Run #0434		
					
					$results
							
					$cnt records were sent.
					
					 This is an automatic email generated by TSSDataGrubber; do not reply.  If you have any questions, please contact john.hargrove@thesellingsource.com. Thank you.
					";
					
				
					
				
		//email delivery
		// Create the Mail Object and Send the Mail	
		include_once("prpc/client.php");
		$mail = new prpc_client("prpc://smtp.2.soapdataserver.com/smtp.1.php");
			
		// Key Line - Create the mailing (Name of mailing, headers, scheduled date, scheduled time) DO NOT USE SCHEDULING!!!
		$mailing_id = $mail->CreateMailing ("datagrubber_run", $header, NULL, NULL);
	
		$recipients=unserialize("a:3:{i:0;O:8:\"stdClass\":3:{s:4:\"type\";s:2:\"To\";s:4:\"name\";s:34:\"myya.perez@thesellingsource.com\";s:7:\"address\";s:34:\"myya.perez@thesellingsource.com\";}i:1;O:8:\"stdClass\":3:{s:4:\"type\";s:2:\"To\";s:4:\"name\";s:23:\"stats@partnerweekly.com\";s:7:\"address\";s:23:\"stats@partnerweekly.com\";}i:2;O:8:\"stdClass\":3:{s:4:\"type\";s:2:\"To\";s:4:\"name\";s:33:\"john.hawkins@thesellingsource.com\";s:7:\"address\";s:33:\"john.hawkins@thesellingsource.com\";}}");
		// Key Line - Add the package to the mailing (mailing_id, array of recipients, message, array of attachments)
		$package_id = $mail->AddPackage ($mailing_id, $recipients, $message, NULL);

		// Key Line - Tell the server to process the mailing (send all emails)
		$result = $mail->SendMail ($mailing_id);
	
		// Debug Code - Use if you want to see the soap stuff
		// print_r ($mail->__get_wire ());
		echo " ... Report Mailing Id: ".$mailing_id."
";
		echo " ... Result: ".$result."\n";
		echo " ... Recipients: 
";	

	print "Batch Completed Successfully"

?>