<?php

	// This file has been automatically generated by DataGrabber(tm)
	require_once('mysql.3.php');
	require_once('debug.1.php');
	require_once('error.2.php');
	require_once('csv.1.php');
	require_once('ftp.2.php');

	$SQL=new MySQL_3();
	$cx=$SQL->connect("both","selsds001","sellingsource","%selling\$_db",Debug_1::Trace_Code(__FILE__,__LINE__));
	Error_2::Error_Test($cx,TRUE);
	$total_records=0;
	$total_bad=0;
	$bad_funded=0;
	$bad_unique=0;
	$bad_scrubbed=0;
	
	
	$start = date("Y-m-d",strtotime("-7 days"));
	$end = date("Y-m-d");
		
	$_TmpTable0467 = $SQL->query("lead_generation","
	CREATE TABLE `TmpTable0467` (
	`id` int(10) unsigned NOT NULL AUTO_INCREMENT,
	`modified` timestamp(14) NOT NULL,
	`created_date` timestamp(14) NOT NULL DEFAULT '00000000000000',
	`first_name` varchar(50) NOT NULL DEFAULT '',
	`last_name` varchar(50) NOT NULL DEFAULT '',
	`email` varchar(100) NOT NULL DEFAULT '',
	`ip_address` varchar(15) NOT NULL DEFAULT '',
	`url` varchar(250) NOT NULL DEFAULT '',
	PRIMARY KEY(`id`)
	) TYPE=MyISAM;
	", Debug_1::Trace_Code(__FILE__,__LINE__));
	
	$Result_olp_bb_visitor=$SQL->query("olp","SELECT
		personal.email AS email,
		personal.last_name AS last_name,
		personal.first_name AS first_name,
		'' blank1,
		'' blank2,
		'' blank3,		
		campaign_info.url AS url,
		campaign_info.ip_address AS ip_address,
		DATE_FORMAT(application.created_date,'%m-%d-%Y') AS created_date
		FROM application
		JOIN personal ON (application.application_id=personal.application_id)
		JOIN campaign_info ON (application.application_id=campaign_info.application_id)
		WHERE
		application.created_date BETWEEN '$start' AND '$end'
		AND application.created_date!=''
		AND personal.first_name!=''
		AND personal.first_name NOT LIKE '%TEST'
		AND personal.first_name NOT LIKE 'TEST%'
		AND personal.first_name NOT LIKE '%SHIT%'
		AND personal.first_name NOT LIKE '%SPAM%'
		AND personal.first_name NOT LIKE '%FUCK%'
		AND personal.first_name NOT LIKE '%BITCH%'
		AND personal.last_name!=''
		AND personal.last_name NOT LIKE '%TEST'
		AND personal.last_name NOT LIKE 'TEST%'
		AND personal.last_name NOT LIKE '%SHIT%'
		AND personal.last_name NOT LIKE '%SPAM%'
		AND personal.last_name NOT LIKE '%FUCK%'
		AND personal.last_name NOT LIKE '%BITCH%'
		AND personal.email!=''
		AND personal.email NOT LIKE '%TEST'
		AND personal.email NOT LIKE 'TEST%'
		AND personal.email NOT LIKE '%SHIT%'
		AND personal.email NOT LIKE '%SPAM%'
		AND personal.email NOT LIKE '%FUCK%'
		AND personal.email NOT LIKE '%BITCH%'
		AND personal.email NOT LIKE '%ABUSE'
		AND personal.email NOT LIKE '%INTERNIC%'
		AND personal.email NOT LIKE '%NETWORKSOLUTIONS%'
		AND personal.email NOT LIKE '%TSSMASTERD%'
		AND application.application_id != 0
		AND campaign_info.ip_address!=''
		AND campaign_info.url!=''
		AND campaign_info.url IN('rapidcashproviderapp.com')",Debug_1::Trace_Code(__FILE__,__LINE__));
	Error_2::Error_Test($Result_olp_bb_visitor,TRUE);
	print "\nolp_bb_visitor count - ". 
	$SQL->Row_Count($Result_olp_bb_visitor);
	$total_records+=$SQL->Row_Count($Result_olp_bb_visitor);
	while($object=$SQL->Fetch_Object_Row($Result_olp_bb_visitor))
	{
		$object_collection[] = $object;
	}
	$Result_olp_bb_partial=$SQL->query("olp_bb_partial","SELECT
		personal.email AS email,
		personal.last_name AS last_name,
		personal.first_name AS first_name,
		'' b1,
		'' b2,
		'' b3,
		campaign_info.url AS url,
		campaign_info.ip_address AS ip_address,
		DATE_FORMAT(campaign_info.modified_date,'%m-%d-%Y') AS created_date
		FROM campaign_info
		JOIN personal ON (campaign_info.application_id=personal.application_id)
		WHERE
		campaign_info.modified_date BETWEEN '$start' AND '$end'
		AND campaign_info.modified_date!=''
		AND personal.first_name!=''
		AND personal.first_name NOT LIKE '%TEST'
		AND personal.first_name NOT LIKE 'TEST%'
		AND personal.first_name NOT LIKE '%SHIT%'
		AND personal.first_name NOT LIKE '%SPAM%'
		AND personal.first_name NOT LIKE '%FUCK%'
		AND personal.first_name NOT LIKE '%BITCH%'
		AND personal.last_name!=''
		AND personal.last_name NOT LIKE '%TEST'
		AND personal.last_name NOT LIKE 'TEST%'
		AND personal.last_name NOT LIKE '%SHIT%'
		AND personal.last_name NOT LIKE '%SPAM%'
		AND personal.last_name NOT LIKE '%FUCK%'
		AND personal.last_name NOT LIKE '%BITCH%'
		AND personal.email!=''
		AND personal.email NOT LIKE '%TEST'
		AND personal.email NOT LIKE 'TEST%'
		AND personal.email NOT LIKE '%SHIT%'
		AND personal.email NOT LIKE '%SPAM%'
		AND personal.email NOT LIKE '%FUCK%'
		AND personal.email NOT LIKE '%BITCH%'
		AND personal.email NOT LIKE '%ABUSE'
		AND personal.email NOT LIKE '%INTERNIC%'
		AND personal.email NOT LIKE '%NETWORKSOLUTIONS%'
		AND personal.email NOT LIKE '%TSSMASTERD%'
		AND campaign_info.application_id!=0
		AND campaign_info.ip_address!=''
		AND campaign_info.url!=''
		AND campaign_info.url IN('rapidcashproviderapp.com')",Debug_1::Trace_Code(__FILE__,__LINE__));
	Error_2::Error_Test($Result_olp_bb_partial,TRUE);
	print "\nolp_bb_partial count - ". 
	$SQL->Row_Count($Result_olp_bb_partial);
	$total_records+=$SQL->Row_Count($Result_olp_bb_partial);
	while($object=$SQL->Fetch_Object_Row($Result_olp_bb_partial))
	{
		$object_collection[] = $object;
	}
	foreach($object_collection as $k=>$object_row){
		$ires=$SQL->query("lead_generation","INSERT IGNORE INTO TmpTable0467 
		SET created_date='".mysql_escape_string($object_row->created_date)."',
		first_name='".mysql_escape_string($object_row->first_name)."',
		last_name='".mysql_escape_string($object_row->last_name)."',
		email='".mysql_escape_string($object_row->email)."',
		ip_address='".mysql_escape_string($object_row->ip_address)."',
		url='".mysql_escape_string($object_row->url)."'",Debug_1::Trace_Code(__FILE__,__LINE__));
		if($SQL->Affected_Row_Count($ires)==0)
		{
			unset($object_collection[$k]);
			print "\nRemoved: Not Unique: {$object_row->email}";
			$bad_unique++;
		}
	}
	
				
	$total_bad=$bad_funded+$bad_unique+$bad_scrubbed;
	$results="

Removed (funded): $bad_funded
Removed (scrubbed): $bad_scrubbed
Removed (duplicate): $bad_unique
Total Removed: $total_bad 
Total Records: $total_records good records - $total_bad bad records = ".($total_records-$total_bad)." usable records";print"\n\n";
	print $results;
	print "\n\nFinalizing...";
	
	$usable_count = $total_records-$total_bad;

	
	$headers = array ("EMAIL","LAST_NAME","FIRST_NAME","","","","URL","IP_ADDRESS","SIGNUPDATE");
	print "\n\nGenerating CSV File '/tmp/leadgen_datagrabber_0467.csv'....

";
	$fp_csv = fopen("/tmp/leadgen_datagrabber_0467.csv","w");
	$csv = new CSV(
		array(
			"forcequotes" => TRUE,
			"header" => $headers,
			"autoflush" => FALSE,			
			"stream" => $fp_csv,			
		)
	);
	
	foreach($object_collection as $row)
	{
		echo "CSV <pre>";var_dump($row);
		$csv->recordFromArray((array)$row);
	}		
	
	$buf=$csv->_buf;
	
	$csv->flush();
	fclose($fp_csv);
	
	print "Done.";			
		$email_port = 25;
		$email_url = "sellingsource.com";
		$email_s_name = "DataGrubber";
		$email_s_address = "data-grubber-noreply@thesellingsource.com";
		
		// Build Email Header
		$header = new StdClass ();
		$header->smtp_server = $email_smtp_server;
		$header->port = $email_port;
		$header->url = $email_url;
		$header->subject = "rapidcashproviderapp.com partial app/complete app summary ($start -> $end)";
		$header->sender_name = $email_s_name;
		$header->sender_address = $email_s_address;
		$recipients = array();
		
		$recipient = new StdClass ();
		$recipient->type = "To";
		$recipient->name = "Reporting";
		$recipient->address = "keith.mcmillen@thesellingsource.com";
		$recipients[] = $recipient;
		
		//$recipient = new StdClass ();
		//$recipient->type = "To";
		//$recipient->name = "Azoogle";
		//$recipient->address="bogdan@azoogleads.com";
		//$recipients[] = $recipient;
		
		
		$message = new StdClass ();
		$message->text = "There are $usable_count records attached.  This is an automatic email generated by TSSDataGrubber; do not reply.  If you have any questions, please contact keith.mcmillen@thesellingsource.com. Thank you.";
		
			
		$attachment_csv = new StdClass ();
		$attachment_csv->name = "leadgen_datagrabber_0467.csv";
		$attachment_csv->content = base64_encode($buf);
		$attachment_csv->content_type = "text/x-csv";
		$attachment_csv->content_length = strlen ($buf);
		$attachment_csv->encoded = TRUE;						
					
		//email delivery
		// Create the Mail Object and Send the Mail	
		include_once("prpc/client.php");
		$mail = new prpc_client("prpc://smtp.2.soapdataserver.com/smtp.1.php");
			
		// Key Line - Create the mailing (Name of mailing, headers, scheduled date, scheduled time) DO NOT USE SCHEDULING!!!
		$mailing_id = $mail->CreateMailing ("datagrubber_run", $header, NULL, NULL);
	
	
		// Key Line - Add the package to the mailing (mailing_id, array of recipients, message, array of attachments)
		$package_id = $mail->AddPackage ($mailing_id, $recipients, $message, array($attachment_csv));

		// Key Line - Tell the server to process the mailing (send all emails)
		$result = $mail->SendMail ($mailing_id);
	
		// Debug Code - Use if you want to see the soap stuff
		// print_r ($mail->__get_wire ());
		echo " ... Mailing Id: ".$mailing_id."
";
		echo " ... Result: ".$result."\n";
		echo " ... Recipients: 
";	
				
				
		$recipients = array();
		$recipient = new StdClass ();
		$recipient->type = "To";
		$recipient->name = "keith.mcmillen@thesellingsource.com";
		$recipient->address = "keith.mcmillen@thesellingsource.com";
		$recipients[] = $recipient;
		$message = new StdClass ();
		$message->text = "
		
		DataGrubber Run #0467		
		
		$results
		
			This is an automatic email generated by TSSDataGrubber; do not reply.  If you have any questions, please contact john.hargrove@thesellingsource.com. Thank you.
		";
					
		//email delivery
		// Create the Mail Object and Send the Mail	
		include_once("prpc/client.php");
		$mail = new prpc_client("prpc://smtp.2.soapdataserver.com/smtp.1.php");
			
		// Key Line - Create the mailing (Name of mailing, headers, scheduled date, scheduled time) DO NOT USE SCHEDULING!!!
		$mailing_id = $mail->CreateMailing ("datagrubber_run", $header, NULL, NULL);
	
		// Key Line - Add the package to the mailing (mailing_id, array of recipients, message, array of attachments)
		$package_id = $mail->AddPackage ($mailing_id, $recipients, $message, NULL);

		// Key Line - Tell the server to process the mailing (send all emails)
		$result = $mail->SendMail ($mailing_id);
	
		// Debug Code - Use if you want to see the soap stuff
		// print_r ($mail->__get_wire ());
		echo " ... Report Mailing Id: ".$mailing_id."
";
		echo " ... Result: ".$result."\n";
		echo " ... Recipients: 
";	
	print "Batch Completed Successfully";

?>
