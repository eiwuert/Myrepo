<?php
/**
 * File contains an OLP Specific class for Trendex Mail client
 * 
 * @author Adam Englander <adam.englander@sellingsource.com>
 * @abstract Contains OlpTxMailClient
 */
require_once('tx/Mail/Client.php');
require_once(BFW_CODE_DIR.'event_logging.php');
require_once(BFW_CODE_DIR.'setup_db.php');

/**
 * Class OlpTxMailClient class extends tx_mail_clent to add logging
 * funtionality to allow for better diagnosis and resolution
 * of Trendex mail queue issues
 *
 * @author Adam Englander <adam.englander@sellingsource.com>
 *
 */
Class OlpTxMailClient extends tx_Mail_Client 
{
	/**
	 * Database connection object
	 * @var object $sql 
	 */
	protected $sql;
	
	/**
	 * Database/Schema for connection and queries
	 * @var string $database 
	 */
	protected  $database;
	
	
	/**
	 * olpTxMailClient extend the parent construct function adding
	 * database connection information for logging
	 *
	 * @param boolean $prpc_die PRPC2 Die value
	 * @param string $mode Server mode for looking up configuration
	 * information from server.php
	 */
	public function __construct($prpc_die = TRUE, $mode = NULL)
	{
		// If the mode is not passed via the constructor get the mode
		// from the session information
		if (is_null($mode))
		{
			$mode = $_SESSION['config']->mode;
		}
		$this->sql = Setup_DB::Get_Instance('TRENDEX_LOG',$mode);
		$this->database = $this->sql->db_info['db'];
		parent::tx_Mail_Client($prpc_die);
	}

	/**
     * OlpTxMailClient destructor.
     * 
     * Unsets the database connection object.
     */
	public function __destruct()
	{
		unset($this->sql);
	}

	/**
	 * sendMessage function attempts to send the message using Trendex
	 * via PRPC, log the resulting attempt, and 
	 * either return the Trendex message ID or throw an exception and 
	 * log the error
	 *
	 * @param string $mode Application mode
	 * @param string $message_id Template identifier for the message
	 * @param string $to_email Email address to which  the message 
	 * will be sent
	 * @param string $track_key Tracking key
	 * @param array $token Email data
	 * @param array $attach Attachments
	 * @param boolean $suppression_list Flag to fetermine if the 
	 * suppression list should be utilized
	 * @return integer Message ID
	 */
	public function sendMessage($mode,$message_id, $to_email, $track_key = '', $token = array(), $attach = array(), $suppression_list = FALSE)
	{
		switch (TRUE)
		{
			case isset($token['applicationid']):
				$application_id = $token['applicationid'];
				break;
			case isset($token['application_id']):
				$application_id = $token['application_id'];
				break;
			case isset($token['app_id']):
				$application_id = $token['app_id'];
				break;
			default:
				$application_id = NULL;
				break;
		}
		$tx_message_id = NULL;
		try 
		{
			$tx_message_id = parent::sendMessage($mode,$message_id,$to_email,$track_key,$token,$attach,$suppression_list);
			// check for custom exception object that may be returned 
			// from PRPC
			if ($tx_message_id instanceof SourcePro_Prpc_Message_Except)
			{
				//Throw the exception contained in the custom exception class
				throw($tx_message_id->except);
			}
			$this->writeLogs($application_id,$message_id,$to_email,$tx_message_id);
		}
		catch(Exception $message_error)
		{
			$details = 'EXCEPTION: Generated by PRPC2: '.$message_error->getMessage().' IN FILE '.$message_error->getFile().
				' AT LINE '.$message_error->getLine();
			$this->writeLogs($application_id,$message_id,$to_email,NULL,$details);
			//throw exception to be caught by calling code
			throw($message_error);
		}
		
		return $tx_message_id;
	}
	
	/**
	 * Function write message information to event and OLP Trendex logs
	 *
	 * @param Integer $application_id Application identifier
	 * @param String $template Document template identifier
	 * @param String $to_email Mail recipient of message
	 * @param Integer $tx_message_id Trendex message identifier
	 * @param String $details Detail message for Trendex Log
	 * @return Void No return value from function
	 */
	protected function writeLogs($application_id,$template,$to_email,$tx_message_id=NULL,$details=NULL)
	{
		if (!empty($application_id))
		{
			$pass_fail = (is_null($tx_message_id))?'FAIL':'PASS';
			try
			{
				$this->writeEventLog($application_id,$pass_fail);
			}
			catch (Exception $event_log_exception)
			{
				/**
				 * If there already is a detail message, add line feed 
				 * and tab for stack type seperation
				 */
				
				$details = (is_null($details))?$details:$details.'\n';
				$details .= 'EXCEPTION: Error writing to Event Log: '.$event_log_exception->getMessage().
							' IN FILE '.$event_log_exception->getFile().' AT LINE '.$event_log_exception->getLine();
			}
			
		}
		else
		{
			$details = (is_null($details))?$details:$details.'\n';
			$details .= 'No Event Log entry written due to no applciation ID provided.';
		}
		try 
		{
			$this->writeTxLog($template,$to_email,$application_id,$tx_message_id,$details);
		}
		catch (Exception $tx_log_exception)
		{
			$msg = 'EXCEPTION: Error writing to OLP Trendex Log: '.$tx_log_exception->getMessage().
					' IN FILE '.$tx_log_exception->getFile().' AT LINE '.$tx_log_exception->getLine();
			$this->writeAppLog($msg,LOG_ERR);
		}
	}

	/**
	 * writeTxLog function writes to the Trendex mail log on the OLP 
	 * database or writes to the appLog on error
	 *
	 * @param string $template Template identifier for the message
	 * @param string $to_email Email address to which  the message 
	 * will be sent
	 * @param integer $application_id Application identifier
	 * @param integer $tx_message_id Trendex message identifier
	 * @param string $detail Details regarding the Trendex mail client
	 * call ans subsequent event log writ attempt
	 * @return boolean Returns boolean value representing the success 
	 * of writing the transaction to the log
	 */
	protected function writeTxLog($template,$to_email,$application_id=NULL,$tx_message_id=NULL,$detail=NULL)
	{
		//Truncate error message and add elipses to fit in database if
		//more than 255 chars long
		if (strlen($detail)>255)
		{
			$detail = substr($detail,0,252).'...';
		}
		try
		{
			$query_message_id = (is_null($tx_message_id) || !is_numeric($tx_message_id))?'null':$tx_message_id;
			$query_application_id = (is_null($application_id) || !is_numeric($application_id))?'null':$application_id;
			$now = time();
			//get table name for rotating tables by week in format trendex_log_YYYY_WW
			$query = "insert into trendex_log 
					(
						trendex_log_id,
						date_created,
						application_id,
						template,
						message_id,
						email,
						detail
					)
					values
					(
						null,
						null,
						".$query_application_id.",
						'".$template."',
						".$query_message_id.",
						'".$to_email."',
						'".mysql_escape_string($detail)."'
					)";
			$this->sql->Query($this->database,$query);
		} 
		catch(Exception $log_write_exception)
		{
			$data = 'EXCEPTION \'Trendex log write error: '.$log_write_exception->getMessage().'\' '.
					'IN FILE \''.$log_write_exception->getFile().'\' '.
					'AT LINE '.$log_write_exception->getLine().' '.
					'WITH DATA [application_id]->'.$application_id.'[message_id]->'.$tx_message_id.
					'[to_email]->'.$to_email.'[detail]->'.$detail;
			$this->writeAppLog($data,LOG_EMERG);
			return FALSE;
		}
		return TRUE;
		
	}
	
	/**
	 * Function writeEventLog write an event log entry for Trendex 
	 * requests
	 *
	 * @param integer $application_id Application identifier
	 * @param string $response Represents the success of Trendex 
	 * queuing the email.  Avaialable options are PASS and FAIL
	 * @param string $event [optional] Event name for the event log.  
	 * Defaults to TX_MAIL_SEND
	 * @return boolean Boolean value representing the success of 
	 * writing to the event log
	 */
	protected function writeEventLog($application_id,$response,$event='TX_MAIL_SEND')
	{
		$event_log = new Event_Log($this->sql,$this->database,$application_id);
		$success = $event_log->Log_Event($event,$response);
		if (!$success)
		{
			$data = 'EXCEPTION \'Event Log write error: Unable to write Email send event to Event Log\' '.
					'IN FILE \''.__FILE__.'\' '.
					'AT LINE '.__LINE__.' '.
					'WITH DATA [application_id]->'.$application_id.'[event]->'.$event.'[response]->'.$response;
			$e = new Exception($data);
			throw $e;
		}
		return $success;
	}
	
	/**
	 * Function writeAppLog writes information to the applicaion log 
	 * for the OlpTxMailClient class
	 * Uses OLP_Applog_Singleton::quickWrite which will use existing 
	 * log directories specified by either APPLOG_SUBDIRECTORY or 
	 * APPLOG_OLE_SUBDIRECTORY constants
	 * 
	 * @param string $message Message to write to the App Log
	 * @param integer $level Log level to write in the log.
	 * @return void Returns the value returned by OLP_Applog_Singleton
	 * which is void on all cases
	 */
	protected function writeAppLog($message,$level)
	{
		$applog_subdirectory = '';
		if (defined('APPLOG_SUBDIRECTORY'))
		{
			$applog_subdirectory = APPLOG_SUBDIRECTORY;
		}
		elseif (defined('APPLOG_OLE_SUBDIRECTORY')){
			$applog_subdirectory = APPLOG_OLE_SUBDIRECTORY;
		}
		require_once(BFW_CODE_DIR.'OLP_Applog_Singleton.php');
		return OLP_Applog_Singleton::quickWrite($message,$applog_subdirectory,$level);
	}
}
?>