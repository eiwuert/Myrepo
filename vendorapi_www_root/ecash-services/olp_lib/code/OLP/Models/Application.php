<?php
	
/*
 * This file was automatically generated by generate_writable_model.php
 * at 2009-03-24, 06:43:07 from 'mysql:host=reporting.olp.ept.tss;port=3306;dbname=olp'.
 *
 * NOTE: Modifications to this file will be overwritten if/when
 * it is regenerated.
 *
 */
class OLP_Models_Application extends OLP_Models_WritableModel implements DB_Models_IReferenceable_1
{
	protected $target_model;
	protected $crypt;
	protected $personal_model;
	
	public function setCrypt(Security_ICrypt_1 $c)
	{
		$this->crypt = $c;
	}
	
	public function getPersonal()
	{
		if (!$this->personal_model instanceof OLP_Models_PersonalEncrypted)
		{
			$model = new OLP_Models_PersonalEncrypted($this->getDatabaseInstance(), $this->crypt);
			if ($model->loadBy(array('application_id' => $this->application_id)))
			{
				$this->personal_model = $model;
			}
			else
			{
				$this->personal_model = false;
			}
		}
		return $this->personal_model;
	}
	
	/**
	 * Attaches reference tables to this model and returns the new referenced model.
	 *
	 * @param DB_Models_ModelFactory_1 $factory
	 * @return DB_Models_ReferencedModel_1
	 */
	public function getReferencedModel(DB_Models_ModelFactory_1 $factory)
	{
		$reference_model = new DB_Models_Decorator_ReferencedWritableModel_1($this);
		$reference_model->addReferenceTable(
			$factory->getReferenceTable(Blackbox_ModelFactory::TARGET_COLLECTION_NAME, FALSE),
			'target_id',
			'property_short'
		);
		$reference_model->addReferenceTable(
			$factory->getReferenceTable(Blackbox_ModelFactory::TARGET_COLLECTION_NAME, FALSE),
			'denied_target_id',
			'denied_property_short'
		);
		$reference_model->addReferenceTable(
			$factory->getReferenceTable('ApplicationStatus'),
			NULL,
			'application_status_name'
		);
		
		return $reference_model;
	}
	
	/**
	 * The list of columns this model contains
	 * @return array string[]
	 */
	public function getColumns()
	{
		static $columns = array(
			'application_id', 'session_id', 'modified_date',
			'created_date', 'bb_vp_id', 'track_id', 'target_id',
			'transaction_id', 'application_type',
			'application_status_id', 'assigned_csr', 'denied_target_id',
			'olp_process', 'is_react'
		);
		return $columns;
	}
	
	public function getTarget()
	{
		if (!$this->target_model instanceof Blackbox_Models_Target 
			|| $this->target_model->target_id != $this->target_id
		)
		{
			$db = $this->getDatabaseInstance();
			$db->selectDatabase("olp_blackbox");
			$model = new Blackbox_Models_Target($db);
			if ($model->loadBy(array("target_id" => $this->target_id)))
				$this->target_model = $model;
			else
				$this->target_model = false;
			$db->selectDatabase("olp");
		}
		return $this->target_model;
	}

	/**
	 * An array of the columns that comprise the primary key
	 * @return array string[]
	 */
	public function getPrimaryKey()
	{
		return array('application_id');
	}

	/**
	 * The auto increment column, if any
	 * @return string|void
	 */
	public function getAutoIncrement()
	{
		return 'application_id';
	}

	/**
	 * Indicates the table name
	 * @return string
	 */
	public function getTableName()
	{
		return 'application';
	}

	/**
	 * Returns an array of columns that need extra processing.
	 *
	 * @return array
	 */
	public function getProcessedColumns()
	{
		$processed_columns = array(
			'created_date' => array(self::PROCESS_DATE),
			'modified_date' => array(self::PROCESS_DATE),
		);
		
		return $processed_columns;
	}
	
	/**
	 * Whether this application is in a 'finished' state, meaning it
	 * can't change statuses any further.
	 * 
	 * @return bool
	 */
	public function isFinished()
	{
		return in_array(strtoupper($this->application_type), array('AGREED', 'EXPIRED', 'FAILED', 'COMPLETED'));
	}
}

?>
