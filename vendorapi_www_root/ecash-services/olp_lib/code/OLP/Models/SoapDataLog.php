<?php 

/*
 * This file was automatically generated by generate_writable_model.php
 * at 2009-05-14, 16:31:02 from 'mysql:host=monster.tss;port=3326;dbname=olp'.
 *
 * NOTE: Modifications to this file will be overwritten if/when
 * it is regenerated.
 *
 */
class OLP_Models_SoapDataLog extends OLP_Models_CryptWritableModel  
{
	/**
	 * The list of columns this model contains
	 * @return array string[]
	 */
	public function getColumns()
	{
		static $columns = array(
			'id', 'date_created', 'unique_id', 'email', 'remote_site',
			'data', 'elapsed', 'type', 'encrypted'
		);
		return $columns;
	}

	/**
	 * An array of the columns that comprise the primary key
	 * @return array string[]
	 */
	public function getPrimaryKey()
	{
		return array('id');
	}

	/**
	 * The auto increment column, if any
	 * @return string|void
	 */
	public function getAutoIncrement()
	{
		return 'id';
	}

	/**
	 * Indicates the table name
	 * @return string
	 */
	public function getTableName()
	{
		return 'soap_data_log';
	}
	
	/**
	 * Returns an array of columns that need extra processing.
	 *
	 * @return array
	 */
	public function getProcessedColumns()
	{
		$processed_columns = array(
			'data' => array(self::PROCESS_COMPRESS, self::PROCESS_ENCRYPT)
		);
		
		// Merge in any processed columns from parent
		$parent_processed_columns = parent::getProcessedColumns();
		if (is_array($parent_processed_columns))
		{
			$processed_columns = array_merge_recursive($parent_processed_columns, $processed_columns);
		}
		
		return $processed_columns;
	}

	/**
	 * Gets the column data for updating/insertion
	 *
	 * This is used to perform per-column transformations as the data goes into the database.
	 *
	 * @return array
	 */
	public function getColumnData()
	{
		$column_data = parent::getColumnData();
		return $column_data;
	}

	/**
	 * Sets the column data in the model
	 *
	 * This is used to perform per-column transformation as the data comes from the database
	 *
	 * @return void
	 */
	protected function setColumnData($column_data)
	{
		parent::setColumnData($column_data);
	}
}

?>