<?php 

/*
 * This file was automatically generated by generate_writable_model.php
 * at 2009-06-24, 12:38:39 from 'mysql:host=monster.tss;port=3326;dbname=olp'.
 *
 * NOTE: Modifications to this file will be overwritten if/when
 * it is regenerated.
 *
 */
class OLP_Models_BlackboxPost extends OLP_Models_CryptWritableModel  
{
	protected $data_sent_model;
	protected $data_received_model;
	
	/**
	 * The list of columns this model contains
	 * @return array
	 */
	public function getColumns()
	{
		static $columns = array(
			'application_id', 'winner', 'date_modified', 'date_created',
			'post_result_id', 'num_retry','blackbox_post_id',
			'num_update', 'post_time', 'success', 'compression', 'type',
			'vendor_decision', 'vendor_reason', 'encrypted'
		);
		return $columns;
	}
	
	
	
	public function getDataSent()
	{
		return $this->getDataSentModel()->data_sent;
	}
	
	public function getDataReceived()
	{
		return $this->getDataReceivedModel()->data_received;
	}
	
	public function setDataSent($value)
	{
		$this->getDataSentModel()->data_sent = $value;
		$this->getDataSentModel()->date_created = time();
	}
	
	public function setDataReceived($value)
	{
		$this->getDataReceivedModel()->data_received = $value;
	}
	
	public function save() 
	{
		$ret = parent::save();
		$this->getDataSentModel()->save();
		$this->getDataReceivedModel()->save();
		return $ret;
	}
	
	public function __get($key)
	{
		switch ($key)
		{
			case 'data_sent':
				return $this->getDataSent();
				break;
			case 'data_recv':
				return $this->getDataReceived();
			default:
				return parent::__get($key);
		}
	}
	
	public function __set($key, $value)
	{
		switch ($key)
		{
			case 'data_sent':
				return $this->setDataSent($value);
			case 'data_recv':
				return $this->setDataReceived($value);
			default:
				return parent::__set($key, $value);
		}
	}
	
	
	
	public function getDataSentModel()
	{
		if (!$this->data_sent_model instanceof OLP_Models_BlackboxPostDataSent)
		{
			$this->data_sent_model = new OLP_Models_BlackboxPostDataSent($this->getDatabaseInstance(), $this->crypt_object);
			if (is_numeric($this->blackbox_post_id))
			{
				$this->loadDataSent();
			}
		}
		else
		{
			if ($this->data_sent_model->blackbox_post_id != $this->blackbox_post_id)
			{
				$this->loadDataSent();
			}
		}
		return $this->data_sent_model;
	}
	
	protected function loadDataSent()
	{
		if (!$this->data_sent_model->loadBy(array('blackbox_post_id' => $this->blackbox_post_id)))
		{
			$this->data_sent_model->blackbox_post_id = $this->blackbox_post_id;
			$this->data_sent_model->date_created = time();
		}
	}
	
	public function getDataReceivedModel()
	{
		if (!$this->data_received_model instanceof OLP_Models_BlackboxPostDataReceived)
		{
			$this->data_received_model = new OLP_Models_BlackboxPostDataReceived($this->getDatabaseInstance(), $this->crypt_object);
			if (is_numeric($this->blackbox_post_id))
			{
				$this->loadDataReceived();
			}
		}
		else
		{
			if ($this->data_received_model->blackbox_post_id != $this->blackbox_post_id)
			{
				$this->loadDataReceived();
			}
		}
		return $this->data_received_model;
	}
	
	protected function loadDataReceived()
	{
		if (!$this->data_received_model->loadBy(array('blackbox_post_id' => $this->blackbox_post_id)))
		{
			$this->data_received_model->blackbox_post_id = $this->blackbox_post_id;
			$this->data_received_model->date_created = time();
		}
	}

	/**
	 * Loads all blackbox post entries for a winner by date. If start_date is provided
	 * with no end_date it will pull all posts with a date > start_date. If end_date is 
	 * provided with no start_date it will pull all posts with a date < end_date. If both
	 * are provided it will pull all posts between them. If the where contains email or
	 * social_security_number, it'll join the personal_encrypted table and add those to the
	 * where. If an array of winners is provided, it'll use all of those.
	 *
	 * @param string $winner
	 * @param date $start_date
	 * @param date $end_date
	 * @param array $where_args
	 * @return DB_Models_IterativeModel_1
	 */
	public function loadAllByWinnerBetweenDate($winner, $start_date, $end_date, array $where_args = array())
	{
		$db = $this->getDatabaseInstance();
		if (count($where_args)) {
			$where_query = " AND ".substr(self::buildWhere($where_args),7);
		}
		$query = " 
			SELECT *
			FROM ".$db->quoteObject($this->getTableName());
		if (array_key_exists('social_security_number', $where_args) || array_key_exists('email', $where_args))
		{
			$query .= sprintf(' JOIN %s ON (%s.application_id = %s.application_id)',
					'personal_encrypted', $this->getTableName(),'personal_encrypted');
		}
		if (is_array($winner))
		{
			$query .= " WHERE ".$this->getTableName().".winner IN (";
			$i=0;
			foreach ($winner as $w)
			{
				$query .= ":winner$i,";
				$where_args["winner$i"] = $w;
				$i++;
			}
			$query = rtrim($query,",").')';
		}
		elseif (strpos($winner, '%') !== FALSE)
		{
			$query .= " WHERE ".$this->getTableName().".winner LIKE :winner";
			$where_args["winner"] = $winner;
		}
		else
		{
			$query .= " WHERE ".$this->getTableName().". = :winner";
			
		}
		if (!empty($start_date) && !empty($end_date))
		{
			$query .= " AND ".$this->getTableName().".date_created BETWEEN :start_date AND :end_date";
			$where_args["start_date"] = $start_date;
			$where_args["end_date"] = $end_date;
		}
		elseif (!empty($start_date) && empty($end_date))
		{
			$query .= " AND ".$this->getTableName().".date_created > :start_date";
			$where_args["start_date"] = $start_date;
		}
		elseif (empty($start_date) && !empty($end_date))
		{
			$query .= " AND ".$this->getTableName().".date_created < :end_date";
			$where_args["end_date"] = $end_date;
		}

		if (!empty($where_query))
		{
			$query .= $where_query;
		}
		$query= trim($query);
		$st = DB_Util_1::queryPrepared(
			$db,
			$query,
			$where_args
		);  
		return $this->factoryIterativeModel($st, $db);
	}

	/**
	 *
	 * @param string $winner
	 * @param string $start_date
	 * @param string $end_date
	 * @param array $where_args
	 */
	public function loadAllByWinnerDateSSN($winner, $ssn, $start_date, $end_date, array $where_args = array())
	{
		
	}

	/**
	 * An array of the columns that comprise the primary key
	 * @return array
	 */
	public function getPrimaryKey()
	{
		return array('application_id', 'winner', 'type');
	}

	/**
	 * The auto increment column, if any
	 * @return mixed
	 */
	public function getAutoIncrement()
	{
		return 'blackbox_post_id';
	}

	/**
	 * Indicates the table name
	 * @return string
	 */
	public function getTableName()
	{
		return 'blackbox_post';
	}
	
}
